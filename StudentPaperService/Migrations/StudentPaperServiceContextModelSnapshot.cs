// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using StudentPaperService.Models.Context;
using System;

namespace StudentPaperService.Migrations
{
    [DbContext(typeof(StudentPaperServiceContext))]
    partial class StudentPaperServiceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("StudentPaperService.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ApplicationUser");
                });

            modelBuilder.Entity("StudentPaperService.Models.FinalPaper", b =>
                {
                    b.Property<long>("FinalPaperId")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("FinalPaperTypeId");

                    b.Property<string>("MentorId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<byte[]>("PaperFile")
                        .IsRequired();

                    b.Property<DateTime>("PublishDate");

                    b.Property<string>("StudentId");

                    b.HasKey("FinalPaperId");

                    b.HasIndex("FinalPaperTypeId");

                    b.HasIndex("MentorId");

                    b.HasIndex("StudentId");

                    b.ToTable("FinalPapers");
                });

            modelBuilder.Entity("StudentPaperService.Models.FinalPaperType", b =>
                {
                    b.Property<long>("FinalPaperTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("FinalPaperTypeId");

                    b.ToTable("FinalPaperTypes");
                });

            modelBuilder.Entity("StudentPaperService.Models.ProfessorSubject", b =>
                {
                    b.Property<string>("ProfessorId");

                    b.Property<long>("SubjectId");

                    b.HasKey("ProfessorId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("ProfessorSubjects");
                });

            modelBuilder.Entity("StudentPaperService.Models.SeminarPaper", b =>
                {
                    b.Property<long>("SeminarPaperId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<byte[]>("PaperFile")
                        .IsRequired();

                    b.Property<string>("ProfessorSubjectProfessorId");

                    b.Property<long?>("ProfessorSubjectSubjectId");

                    b.Property<DateTime>("PublishDate");

                    b.Property<string>("StudentId");

                    b.HasKey("SeminarPaperId");

                    b.HasIndex("StudentId");

                    b.HasIndex("ProfessorSubjectProfessorId", "ProfessorSubjectSubjectId");

                    b.ToTable("SeminarPapers");
                });

            modelBuilder.Entity("StudentPaperService.Models.Subject", b =>
                {
                    b.Property<long>("SubjectId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("SubjectId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("StudentPaperService.Models.Admin", b =>
                {
                    b.HasBaseType("StudentPaperService.Models.ApplicationUser");


                    b.ToTable("Admins");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("StudentPaperService.Models.Professor", b =>
                {
                    b.HasBaseType("StudentPaperService.Models.ApplicationUser");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.ToTable("Professors");

                    b.HasDiscriminator().HasValue("Professor");
                });

            modelBuilder.Entity("StudentPaperService.Models.Student", b =>
                {
                    b.HasBaseType("StudentPaperService.Models.ApplicationUser");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("Student_FirstName");

                    b.Property<string>("IndexNumber")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("Student_LastName");

                    b.HasIndex("IndexNumber")
                        .IsUnique()
                        .HasFilter("[IndexNumber] IS NOT NULL");

                    b.ToTable("Students");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("StudentPaperService.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("StudentPaperService.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StudentPaperService.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("StudentPaperService.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StudentPaperService.Models.FinalPaper", b =>
                {
                    b.HasOne("StudentPaperService.Models.FinalPaperType", "FinalPaperType")
                        .WithMany()
                        .HasForeignKey("FinalPaperTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StudentPaperService.Models.Professor", "Mentor")
                        .WithMany("FinalPapers")
                        .HasForeignKey("MentorId");

                    b.HasOne("StudentPaperService.Models.Student", "Student")
                        .WithMany("FinalPapers")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("StudentPaperService.Models.ProfessorSubject", b =>
                {
                    b.HasOne("StudentPaperService.Models.Professor", "Professor")
                        .WithMany("ProfessorSubjects")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StudentPaperService.Models.Subject", "Subject")
                        .WithMany("ProfessorSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StudentPaperService.Models.SeminarPaper", b =>
                {
                    b.HasOne("StudentPaperService.Models.Student", "Student")
                        .WithMany("SeminarPapers")
                        .HasForeignKey("StudentId");

                    b.HasOne("StudentPaperService.Models.ProfessorSubject", "ProfessorSubject")
                        .WithMany("SeminarPapers")
                        .HasForeignKey("ProfessorSubjectProfessorId", "ProfessorSubjectSubjectId");
                });
#pragma warning restore 612, 618
        }
    }
}
